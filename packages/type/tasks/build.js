/**
 * Copyright IBM Corp. 2015, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* eslint-disable no-console */

'use strict';

const { types: t, generate } = require('@carbon/scss-generator');
const { paramCase } = require('change-case');
const fs = require('fs-extra');
const path = require('path');
const { styles } = require('../lib');

const SCSS_DIR = path.resolve(__dirname, '../scss/modules/generated');
const FILE_BANNER = t.Comment(` Code generated by @carbon/type. DO NOT EDIT.

 Copyright IBM Corp. 2018, 2021

 This source code is licensed under the Apache-2.0 license found in the
 LICENSE file in the root directory of this source tree.
`);

function convert(value) {
  if (typeof value === 'object') {
    return t.SassMap({
      properties: Object.entries(value).map(([key, value]) => {
        return t.SassMapProperty({
          key: t.Identifier(paramCase(key)),
          value: convert(value),
        });
      }),
    });
  }
  return t.SassValue(value);
}

async function build() {
  const variables = Object.entries(styles).flatMap(([key, value]) => {
    const comment = [
      '/ @type Map',
      '/ @access public',
      '/ @group @carbon/type',
    ].join('\n');

    return [
      t.Newline(),
      t.Comment(comment),
      t.Assignment({
        id: t.Identifier(formatTokenName(key)),
        init: convert(value),
        default: true,
      }),
    ];
  });

  const tokens = t.Assignment({
    id: t.Identifier('tokens'),
    init: t.SassMap({
      properties: Object.keys(styles).map((key) => {
        return t.SassMapProperty({
          key: t.Identifier(formatTokenName(key)),
          value: t.SassValue(`$${formatTokenName(key)}`),
        });
      }),
    }),
    default: true,
  });

  const stylesheet = t.StyleSheet([
    FILE_BANNER,
    ...variables,
    t.Newline(),
    tokens,
  ]);

  await fs.ensureDir(SCSS_DIR);
  await fs.writeFile(
    path.join(SCSS_DIR, '_styles.scss'),
    generate(stylesheet).code
  );
}

const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

/**
 * Format a given token into the format expected in CSS/SCSS-based projects.
 * @param {string} token
 * @returns {string}
 */
function formatTokenName(token) {
  let string = '';

  for (let i = 0; i < token.length; i++) {
    // If we run into a number, we hit the scale step at the end of a token name
    // and can safely truncate the rest of the token
    if (numbers.indexOf(token[i]) !== -1) {
      string += '-' + token.slice(i);
      break;
    }

    // When encountering an uppercase name, we will want to start adding `-`
    // between words
    if (token[i] === token[i].toUpperCase()) {
      // Check backwards to see if previous letter was also capitalized, if so
      // we are in a special case like UI where each piece should be connected
      if (token[i - 1] && token[i - 1] === token[i - 1].toUpperCase()) {
        string += token[i].toLowerCase();
        continue;
      }

      // Otherwise, just concatenate this new part on to the existing string
      string += '-' + token[i].toLowerCase();
      continue;
    }

    // By default, we add the current character to the output string
    string += token[i];
  }

  return string;
}

build().catch((error) => {
  console.error(error);
  process.exit(1);
});
